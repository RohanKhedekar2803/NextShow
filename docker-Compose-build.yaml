version: '3.1'

networks:
  nextshow-network:
    driver: bridge

volumes:
  mysql_data:
  maven_repo:

services:
  # # Build DTO
  # dto-build:
  #   build:
  #     context: ./nextshow-dto
  #   container_name: dto-build
  #   command: mvn clean install -DskipTests
  #   volumes:
  #     - maven_repo:/root/.m2
  #   networks:
  #     - nextshow-network

  # # Infrastructure Services
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - nextshow-network

  kafka-server:
    image: wurstmeister/kafka
    container_name: kafka-server
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-server:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nextshow-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nextshow-network

  mysql:
    image: mysql:8
    container_name: mysql
    restart: always
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: Rohan@2803
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-multiple-dbs.sql:/docker-entrypoint-initdb.d/init-multiple-dbs.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-pRohan@2803"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nextshow-network

  # Microservices
  discovery-service:
    build:
      context: ./nextshow-discovery-client
    container_name: discovery-service
    ports:
      - "8761:8761"
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761"]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - maven_repo:/root/.m2
    networks:
      - nextshow-network

  gateway-service:
    build:
      context: ./nextshow-gateway
    container_name: gateway-service
    ports:
      - "8080:8080"
    depends_on:
      discovery-service:
        condition: service_healthy
      mysql:
        condition: service_healthy
    volumes:
      - maven_repo:/root/.m2
    networks:
      - nextshow-network

  booking-service:
    build:
      context: ./booking-service
    container_name: booking-service
    ports:
      - "8081:8081"
    depends_on:
      discovery-service:
        condition: service_healthy
      mysql:
        condition: service_healthy
      kafka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - maven_repo:/root/.m2
    networks:
      - nextshow-network

  events-service:
    build:
      context: ./events-service
    container_name: events-service
    ports:
      - "8082:8082"
    depends_on:
      discovery-service:
        condition: service_healthy
      mysql:
        condition: service_healthy
      kafka-server:
        condition: service_healthy
    volumes:
      - maven_repo:/root/.m2
    networks:
      - nextshow-network

  # shows-service:
  #   build:
  #     context: ./shows-service
  #   container_name: shows-service
  #   ports:
  #     - "8083:8083"
  #   depends_on:
  #     discovery-service:
  #       condition: service_healthy
  #     mysql:
  #       condition: service_healthy
  #     kafka-server:
  #       condition: service_healthy
  #   volumes:
  #     - maven_repo:/root/.m2
  #   networks:
  #     - nextshow-network

  # payments-notification-service:
  #   build:
  #     context: ./paymentsAndNotifictionService
  #   container_name: payments-notification-service
  #   ports:
  #     - "8084:8084"
  #   depends_on:
  #     discovery-service:
  #       condition: service_healthy
  #     mysql:
  #       condition: service_healthy
  #     kafka-server:
  #       condition: service_healthy
  #   volumes:
  #     - maven_repo:/root/.m2
  #   networks:
  #     - nextshow-network

  user-service:
    build:
      context: ./UserService
    container_name: user-service
    ports:
      - "8085:8085"
    depends_on:
      discovery-service:
        condition: service_healthy
      mysql:
        condition: service_healthy
    volumes:
      - maven_repo:/root/.m2
    networks:
      - nextshow-network
